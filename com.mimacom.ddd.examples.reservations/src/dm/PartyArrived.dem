domain dm.Restaurant 

event Party_arrived 
«A group of people (a.k.a. [Party]) have entered the restaurant and request a [Table] for a [[Party#size|number]] of persons.»
NOTE n0 { «Event Note» orange}
{

	context
		p : Party

	triggered by
		Leader_of_Party
		Waiter
		NOTE n1 { «Trigger Note» orange}
	
	notifications
		Please_have_a_Seat : Message to Leader_of_Party
		Please_wait_at_the_Bar : Message to Leader_of_Party
		NOTE n1 { «Notification [Waiter] x^^2^^ Note 
			> on 2 lines» orange
		}

	preconditions
		Party_just_arrived:
			«[p] in state [Party.ARRIVED] and arrived just now»
			p.state != Party.ARRIVED AND p.arrival_Time = now()

		Party_not_at_Table:
			«[p] ist not at a [Table] yet»
			NOT Table.all.exists(t | t.party = p)

	postconditions
		case Party_at_Table
		«There is a free table large enough for [p]»
		when Tables.has_Free_Table(p.size):

			Party_seated:
				«[p] is seated»
				p.state = Party.SEATED

			Party_assigned_to_Table:
				«There was a matching [Table] at which [p] now sits and which is now marked as used»
				Table.all.exists(t | t.details.seats ≥ p.size AND t.party = p AND t.state = Table.USED)

			Message_delivered:
				«[p] was notified to have a seat»
				Please_have_a_Seat.delivered

		case Party_waiting
		«There is no free [Table] yet AND [p] is prepared to wait for the quoted wait time AND »
		when NOT  Tables.has_Free_Table(p.size) AND p.max_Wait_Time ≤ Tables.estimated_Wait_Time(p.size) :

			Party_waiting: 
				«[p] are waiting now»
				p.state = Party.WAITING AND p.arrival_Time = now()

			Message_delivered:
				«[p] was notified to wait at the bar»
				Please_wait_at_the_Bar.delivered

		case Party_left
		«[p] has waited long enough»
		when p.max_Wait_Time > Tables.estimated_Wait_Time(p.size):

			Party_left:
				«[p] has left»
				p.state = Party.LEFT
}


